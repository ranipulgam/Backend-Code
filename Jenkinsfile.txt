pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "ranipulgam06/event-management-system"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/ranipulgam/Backend-Code.git', branch: 'main'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        
        stage('Lint') {
            steps {
                sh 'npm run lint'
            }
        }
        
        stage('Run Tests') {
            steps {
                sh 'npm test'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${env.BUILD_ID}")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'ranipulgam06', passwordVariable: 'potti@2005')]) {
                    sh "docker login -u $ranipulgam06 -p $potti@2005"
                    sh "docker push ${DOCKER_IMAGE}:${env.BUILD_ID}"
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                sshagent(['staging-server-credentials']) {
                    sh 'scp -r build/* user@staging-server:/var/www/event-management-system'
                    sh 'ssh user@staging-server "systemctl restart event-management-system"'
                }
            }
        }
        
        stage('Approval for Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Deploy to production?', ok: 'Yes, Deploy'
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                sshagent(['production-server-credentials']) {
                    sh 'scp -r build/* user@production-server:/var/www/event-management-system'
                    sh 'ssh user@production-server "systemctl restart event-management-system"'
                }
            }
        }
    }
    
    post {
        always {
            junit '**/test-results/*.xml'
            cleanWs()
        }
    }
}
